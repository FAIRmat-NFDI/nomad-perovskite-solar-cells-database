#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    MEnum,
    Section,
)
from nomad.datamodel.data import (
    ArchiveSection,
)
if TYPE_CHECKING:
    pass

m_package = Package(name='Perovskite composition')


class perovskite_composition(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    short_form = Quantity(
        type=str,
    )
    long_form = Quantity(
        type=str,
    )
    composition_estimate = Quantity(
        type=MEnum(
            [
                'Estimated from precursor solutions',
                'Literature value',
                'Estimated from XRD data',
                'Estimated from spectroscopic data',
                'Theoretical simulation',
                'Hypothetical compound',
                'Other']),
        a_eln={
            "component": "EnumEditQuantity"},
    )
    sample_type = Quantity(
        type=MEnum(
            [
                'Polycrystalline film',
                'Single crystal',
                'Quantum dots',
                'Nano rods',
                'Colloidal solution',
                'Amorphous',
                'Other']),
        a_eln={
            "component": "EnumEditQuantity"},
    )
    dimensionality = Quantity(
        type=MEnum(['0D', '1D', '2D', '2D/3D', '3D', 'Other']),
        description='The dimensionality of the perovskite, i.e. 3D, 2D, 1D (nanorods), quantum dots (0D), etc.',
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    band_gap = Quantity(
        type=float,
        description='Band gap of photoabsorber in eV.',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "eV"
        },
        unit="eV",
        shape=[],
    )
    a_ions = SubSection(
        section_def=Ions,
        repeats=True,
    )
    b_ions = SubSection(
        section_def=Ions,
        repeats=True,
    )
    c_ions = SubSection(
        section_def=Ions,
        repeats=True,
    )
    secondary_phases_impurities_and_dopants = SubSection(
        section_def=Materials_in_layer,
        repeats=True,
    )


class Ions(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    abbreviation = Quantity(
        type=str,
        description='The standard abbreviation of the ion. If the abbreviation is in the archive, additional data is complemented automatically',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    coefficient = Quantity(
        type=float,
        description='The stoichiometric coefficient',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=[],
    )
    common_name = Quantity(
        type=str,
        description='The common trade name of the ion',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    molecular_formula = Quantity(
        type=str,
        description='The molecular formula',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    smile = Quantity(
        type=str,
        description='The canonical SMILE string',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    iupac_name = Quantity(
        type=str,
        description='The standard IUPAC name',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    cas_number = Quantity(
        type=str,
        description='The CAS number if available',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    source_compound_smile = Quantity(
        type=str,
        description='The canonical SMILE string',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    source_compound_iupac_name = Quantity(
        type=str,
        description='The standard IUPAC name',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )
    source_compound_cas_number = Quantity(
        type=str,
        description='The CAS number if available',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=[],
    )


m_package.__init_metainfo__()
