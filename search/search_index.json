{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#welcome-to-the-nomad-perovskite-solar-cells-database-documentation","title":"Welcome to the <code>nomad-perovskite-solar-cells-database</code> documentation","text":""},{"location":"index.html#nomad-perovskite-solar-cells-database","title":"NOMAD Perovskite Solar Cells Database","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>Welcome to the NOMAD plugin for the Perovskite Solar Cell Database. This project aims to provide a FAIR and open-access interface for the perovskite solar cells database in NOMAD and related data sources. Additionally, it has data models and schemas for defining ions and halide hybrid-perovskite compositions. The data can be accessed via the NOMAD API and explored in the NOMAD Solar Cell Search App.</p> <p></p> <p>Information about the original database is available at perovskitedatabase.com.</p>"},{"location":"index.html#search-applications","title":"Search applications","text":"<p>Search applications provide an efficient way to explore the databases. They are powered by metadata definitions that define the structure of the data and allow for filtering and visualization.</p> \ud83d\udd0d Search Application \ud83d\udcdd Description \ud83d\udcbb Code \ud83d\udcc4 Metadata Definitions The Perovskite Database Project Explore the data from the perovskite database. App's code Metadata Halide Perovskite Ions Database Search ions used in halide perovskites compounds App's code Metadata Solar Cells An application to explore solar cells App's code Metadata"},{"location":"index.html#tutorial","title":"Tutorial","text":"<ul> <li>Sharing a perovskite composition</li> </ul>"},{"location":"index.html#how-to-guides","title":"How-to guides","text":"<p>How-to guides provide step-by-step instructions for a wide range of tasks:</p> <ul> <li>Install this plugin</li> <li>Explore the databases</li> <li>Create a perovskite composition</li> <li>Add a new perovskite ion to the database</li> <li>Export structure files</li> <li>Download data</li> </ul>"},{"location":"index.html#example-notebooks","title":"Example Notebooks","text":""},{"location":"index.html#related-resources","title":"Related Resources","text":"<ul> <li>Original Paper on Nature Energy</li> <li>NOMAD Documentation</li> <li>Information about the original database is available at perovskitedatabase.com.</li> </ul>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<p>Special thanks to Jinzhao Li and all contributors who have made this project possible. This project is supported by the FAIRmat NFDI initiative and also by by the European Union as part of the SolMates project (Project Nr. 101122288).</p> <p> </p>"},{"location":"how_to/add_a_new_ion.html","title":"Add a new ion","text":""},{"location":"how_to/add_a_new_ion.html#how-to-add-a-new-ion-to-the-database","title":"How to add a new ion to the database","text":"<p>The Halide Perovskite Ions Database, compiles a set of more than 300 entries of ions used in halide perovskites compounds. This one can be used to explore potential ions for perovskites, visualize those ions, or download its structured data. This dataset can be extended for new ions by uploading new data to the NOMAD repository following the steps below.</p>"},{"location":"how_to/create_a_perovskite_composition.html","title":"Create a perovskite compostion","text":""},{"location":"how_to/create_a_perovskite_composition.html#how-to-create-a-perovskite-composition","title":"How to create a perovskite composition","text":"<p>In NOMAD it is possible to utilize the perovskite ions database for creating perovskite composition entries.</p> <p>The documentation below contains instructions for the following tasks:</p> <ul> <li>Create a new perovskite composition in NOMAD</li> <li>Create a new perovskite composition from an existing JSON file</li> <li>Download a JSON file with a perovskite composition from your own upload</li> <li>Upload and publish a Perovskite composition to the NOMAD Database</li> </ul>"},{"location":"how_to/create_a_perovskite_composition.html#create-a-new-perovskite-composition-in-nomad","title":"Create a new perovskite composition in NOMAD","text":""},{"location":"how_to/create_a_perovskite_composition.html#upload-a-perovskite-composition-created-elsewhere-to-the-nomad-database","title":"Upload a Perovskite composition created elsewhere to the NOMAD Database","text":""},{"location":"how_to/create_a_perovskite_composition.html#download-a-json-file-with-a-perovskite-composition-from-your-own-upload","title":"Download a JSON file with a perovskite composition from your own upload","text":""},{"location":"how_to/create_a_perovskite_composition.html#publish-a-perovskite-composition-in-nomad","title":"Publish a Perovskite composition in NOMAD","text":""},{"location":"how_to/download_data.html","title":"Download data","text":""},{"location":"how_to/download_data.html#downloading-data","title":"Downloading data","text":""},{"location":"how_to/download_data.html#download-a-json-file-from-gui","title":"Download a JSON file from GUI","text":"<p>To download a JSON file with the data of the ion you have uploaded, follow the steps below:</p>"},{"location":"how_to/explore_the_databases.html","title":"Explore the databases","text":""},{"location":"how_to/explore_the_databases.html#explore-the-databases","title":"Explore the Databases","text":"<p>The most efficient way to explore the databases is to use the search applications.</p>"},{"location":"how_to/explore_the_databases.html#search-perovskite-solar-cells","title":"Search Perovskite Solar Cells","text":"<p>Using the Perovskite Database Project app, you can combine different filters to find exactly what you need. For example, you can search for solar cells that contain Sn in the perovskite composition and where C60 has been used as an electron transport layer.</p> <p></p> <p>Once the results appear, you can navigate to individual entries by clicking on a row in the results table or directly on points of interest in the scatter plot.</p>"},{"location":"how_to/explore_the_databases.html#search-ions","title":"Search Ions","text":"<p>Similarly, you can explore the Ion Database app to find ions used in halide perovskites. Filters are available for elements, and you can use two-dimensional filters in the scatter plot to locate bulky ions with a large number of atoms and high molecular weight.</p> <p></p>"},{"location":"how_to/explore_the_databases.html#copy-the-search-query-for-the-api","title":"Copy the Search Query for the API","text":"<p>If you need to work with larger datasets programmatically, the GUI provides tools to build API calls. Use the \"Copy API call\" <code>&lt; &gt;</code> button to copy the API call to your clipboard, and then paste it into your code.</p> <p></p> <p>For more information on using the API, check the NOMAD API documentation.</p>"},{"location":"how_to/export_structures.html","title":"Export a structure","text":""},{"location":"how_to/export_structures.html#exporting-structure-files","title":"Exporting structure files","text":"<p>For the Halide Perovskite Ions Database we have calculated the conformers of the molecules using the RDKit Software. The structure files of these conformers can be downloaded directly from the overview page of the ion entry or Programmatically using the NOMAD API.</p>"},{"location":"how_to/export_structures.html#downloading-structure-files-from-the-overview-page","title":"Downloading structure files from the overview page","text":""},{"location":"how_to/export_structures.html#programmatically-using-the-nomad-api","title":"Programmatically using the NOMAD API","text":"<p>Example for retrieving the structure of Pyrene-O-ethylammonium:</p> <pre><code>import requests\n\n# Define the base URL\nbase_url = 'https://nomad-lab.eu/prod/v1/develop/api/v1/systems'\n\n# Specify the entry ID\nentry_id = 'ccun2zHQ49i6bA-RoTdK3U6mqBZM'\n\n# Define the query parameters\nparams = {\n    'path': 'results/material/topology/0',\n    'format': 'xyz',\n    'wrap_mode': 'original'\n}\n\n# Construct the full URL by appending the entry ID\nfull_url = f'{base_url}/{entry_id}'\n\n# Make the GET request with the specified parameters\nresponse = requests.get(full_url, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Process the response content\n    data = response.content\n    # For example, save the content to a file\n    with open('output.xyz', 'wb') as file:\n        file.write(data)\nelse:\n    print(f'Error: {response.status_code}')\n</code></pre> <p>With this, you could write a script to download the structure files of the conformers of all the ions in the database.</p>"},{"location":"how_to/install_this_plugin.html","title":"Install this plugin","text":""},{"location":"how_to/install_this_plugin.html#install-this-plugin","title":"Install This Plugin","text":"<p>If you want to run this plugin locally on your Oasis to use the defined schemas, you  need to add the plugin to your Oasis image. The recommended way of doing this is to add it to the plugins table in the  <code>pyproject.toml</code> file of your  NOMAD distribution repository.</p> <p>Currently the plugin is not published to PyPI and you will need to specify a git   source. For this you also need to specify a version tag, branch, or commit.   For example, to use the v0.1.1 release you should add the following the to the   <code>pyproject.toml</code>:</p> <pre><code>[project.optional-dependencies]\nplugins = [\n  \"perovskite-solar-cell-database @ git+https://github.com/FAIRmat-NFDI/nomad-perovskite-solar-cells-database.git@v0.1.1\"\n]\n</code></pre> <p>For more detailed installation instructions, visit our docs for NOMAD plugins.</p>"},{"location":"notebooks/notebooks.html","title":"References","text":""},{"location":"notebooks/notebooks.html#references","title":"References","text":"<p>Attention</p> <p>TODO</p>"},{"location":"reference/composition_and_ion_schema.html","title":"Composition and ion schema","text":""},{"location":"reference/composition_and_ion_schema.html#perovskitechemicalsection","title":"PerovskiteChemicalSection","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type cas_number <code>str</code> The CAS number if available common_name <code>str</code> The common trade name iupac_name <code>str</code> The standard IUPAC name molecular_formula <code>str</code> The molecular formula smiles <code>str</code> The canonical SMILE string"},{"location":"reference/composition_and_ion_schema.html#perovskiteionsection","title":"PerovskiteIonSection","text":"<p>inherits from: <code>PerovskiteChemicalSection</code></p> <p>properties:</p> name type abbreviation <code>str</code> The standard abbreviation of the ion. If the abbreviation is in the archive, additional data is complemented automatically source_compound_cas_number <code>str</code> The CAS number if available of the source compound source_compound_iupac_name <code>str</code> The standard IUPAC name of the source compound source_compound_molecular_formula <code>str</code> The molecular formula of the source compound source_compound_smiles <code>str</code> The canonical SMILE string of the source compound"},{"location":"reference/composition_and_ion_schema.html#perovskiteion","title":"PerovskiteIon","text":"<p>description: Abstract class for describing a general perovskite ion.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.PureSubstance</code>, <code>PerovskiteIonSection</code></p> <p>properties:</p> name type abbreviation <code>str</code> The standard abbreviation of the ion. If the abbreviation is in the archive, additional data is complemented automatically pure_substance <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> Section with properties describing the substance.sub-section source_compound <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> Section with properties describing the substance.sub-section <p>normalization: </p> <p>The normalizer for the <code>PerovskiteIon</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskiteaion","title":"PerovskiteAIon","text":"<p>inherits from: <code>PerovskiteIon</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>normalization: </p> <p>The normalizer for the <code>PerovskiteIon</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitebion","title":"PerovskiteBIon","text":"<p>inherits from: <code>PerovskiteIon</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>normalization: </p> <p>The normalizer for the <code>PerovskiteIon</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitexion","title":"PerovskiteXIon","text":"<p>inherits from: <code>PerovskiteIon</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>normalization: </p> <p>The normalizer for the <code>PerovskiteIon</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskiteioncomponent","title":"PerovskiteIonComponent","text":"<p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SystemComponent</code>, <code>PerovskiteIonSection</code></p> <p>properties:</p> name type coefficient <code>str</code> The stoichiometric coefficient system <code>PerovskiteIon</code> A reference to the component system. <p>normalization: </p> <p>The normalizer for the <code>IonComponent</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskiteaioncomponent","title":"PerovskiteAIonComponent","text":"<p>inherits from: <code>PerovskiteIonComponent</code></p> <p>properties:</p> name type system <code>PerovskiteAIon</code> A reference to the component system. <p>normalization: </p> <p>The normalizer for the <code>IonComponent</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitebioncomponent","title":"PerovskiteBIonComponent","text":"<p>inherits from: <code>PerovskiteIonComponent</code></p> <p>properties:</p> name type system <code>PerovskiteBIon</code> A reference to the component system. <p>normalization: </p> <p>The normalizer for the <code>IonComponent</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitexioncomponent","title":"PerovskiteXIonComponent","text":"<p>inherits from: <code>PerovskiteIonComponent</code></p> <p>properties:</p> name type system <code>PerovskiteXIon</code> A reference to the component system. <p>normalization: </p> <p>The normalizer for the <code>IonComponent</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#impurity","title":"Impurity","text":"<p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceComponent</code>, <code>PerovskiteChemicalSection</code></p> <p>properties:</p> name type abbreviation <code>str</code> The abbreviation used for the additive or impurity. concentration <code>float</code> The concentration of the additive or impurity.unit=<code>1 / centimeter ** 3</code> pure_substance <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> Section describing the pure substance that is the component.sub-section <p>normalization: </p> <p>The normalizer for the <code>Impurity</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitecompositionsection","title":"PerovskiteCompositionSection","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type band_gap <code>float</code> Band gap of photoabsorber in eV.unit=<code>electron_volt</code> composition_estimate <code>['Estimated from XRD data', 'Estimated from precursor solutions', 'Estimated from spectroscopic data', 'Hypothetical compound', 'Literature value', 'Other', 'Theoretical simulation']</code> dimensionality <code>['0D', '1D', '2D', '2D/3D', '3D', 'Other']</code> The dimensionality of the perovskite, i.e. 3D, 2D, 1D (nanorods), quantum dots (0D), etc. formula <code>str</code> long_form <code>str</code> sample_type <code>['Amorphous', 'Colloidal solution', 'Nano rods', 'Other', 'Polycrystalline film', 'Quantum dots', 'Single crystal']</code> short_form <code>str</code> additives <code>Impurity</code> sub-section, repeats impurities <code>Impurity</code> sub-section, repeats ions_a_site <code>PerovskiteAIonComponent</code> sub-section, repeats ions_b_site <code>PerovskiteBIonComponent</code> sub-section, repeats ions_x_site <code>PerovskiteXIonComponent</code> sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PerovskiteCompositionSection</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/composition_and_ion_schema.html#perovskitecomposition","title":"PerovskiteComposition","text":"<p>description: Schema for describing a perovskite composition.</p> <p>inherits from: <code>PerovskiteCompositionSection</code>, <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>normalization: </p> <p>The normalizer for the <code>PerovskiteComposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solar_cell_schema.html","title":"Solar cells schema","text":""},{"location":"reference/solar_cell_schema.html#perovskitesolarcell","title":"PerovskiteSolarCell","text":"<p>description: This schema is adapted to map the data in the Perovskite Solar Cell Database Project. The descriptions in the quantities represent the instructions given to the user who manually curated the data.</p> <p>inherits from: <code>nomad.datamodel.data.EntryData</code>, <code>nomad.datamodel.metainfo.plot.PlotSection</code></p> <p>properties:</p> name type add <code>perovskite_solar_cell_database.schema_sections.add.Add</code> sub-section backcontact <code>perovskite_solar_cell_database.schema_sections.backcontact.Backcontact</code> sub-section cell <code>perovskite_solar_cell_database.schema_sections.cell.Cell</code> sub-section encapsulation <code>perovskite_solar_cell_database.schema_sections.encapsulation.Encapsulation</code> sub-section eqe <code>perovskite_solar_cell_database.schema_sections.eqe.EQE</code> sub-section etl <code>perovskite_solar_cell_database.schema_sections.etl.ETL</code> sub-section htl <code>perovskite_solar_cell_database.schema_sections.htl.HTL</code> sub-section jv <code>perovskite_solar_cell_database.schema_sections.jv.JV</code> sub-section module <code>perovskite_solar_cell_database.schema_sections.module.Module</code> sub-section outdoor <code>perovskite_solar_cell_database.schema_sections.outdoor.Outdoor</code> sub-section perovskite <code>perovskite_solar_cell_database.schema_sections.perovskite.Perovskite</code> sub-section perovskite_deposition <code>perovskite_solar_cell_database.schema_sections.perovskite_deposition.PerovskiteDeposition</code> sub-section ref <code>perovskite_solar_cell_database.schema_sections.ref.Ref</code> sub-section stabilised <code>perovskite_solar_cell_database.schema_sections.stabilised.Stabilised</code> sub-section stability <code>perovskite_solar_cell_database.schema_sections.stability.Stability</code> sub-section substrate <code>perovskite_solar_cell_database.schema_sections.substrate.Substrate</code> sub-section <p>normalization without further documentation</p>"},{"location":"reference/tandem_schema.html","title":"Tandem schema","text":""},{"location":"reference/tandem_schema.html#macro-rendering-error","title":"Macro Rendering Error","text":"<p>File: <code>reference/tandem_schema.md</code></p> <p>ModuleNotFoundError: No module named 'perovskite_solar_cell_database.schema_packages.tandem.tandem'</p> <pre><code>Traceback (most recent call last):\n  File \"/home/runner/work/nomad-perovskite-solar-cells-database/nomad-perovskite-solar-cells-database/.venv/lib/python3.12/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/nomad-perovskite-solar-cells-database/nomad-perovskite-solar-cells-database/.venv/lib/python3.12/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n  File \"/home/runner/work/nomad-perovskite-solar-cells-database/nomad-perovskite-solar-cells-database/.venv/lib/python3.12/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 3, in top-level template code\n  File \"/home/runner/work/nomad-perovskite-solar-cells-database/nomad-perovskite-solar-cells-database/.venv/lib/python3.12/site-packages/nomad_docs/__init__.py\", line 393, in metainfo_package\n    module = importlib.import_module(path)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/importlib/__init__.py\", line 90, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1387, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1360, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1324, in _find_and_load_unlocked\nModuleNotFoundError: No module named 'perovskite_solar_cell_database.schema_packages.tandem.tandem'\n</code></pre>"},{"location":"tutorial/sharing_a_perovskite_composition.html","title":"Tutorial","text":""},{"location":"tutorial/sharing_a_perovskite_composition.html#sharing-a-perovskite-composition-in-nomad","title":"Sharing a perovskite composition in NOMAD","text":"<p>Attention</p> <p>This tutorial is work in progress. For now, please see the how to guides on:</p> <ul> <li>How to add a new ion</li> <li>How to create a perovskite composition</li> </ul>"}]}